-------------------------------------------------------------------------------
|                             GDB ЗА 10 МИНУТ                                 |
-------------------------------------------------------------------------------

---------------------------- БАЗОВЫЕ ПРИНЦИПЫ ---------------------------------

Собирать свою программу с отладочной информацией и без оптимизации (-O0 -g).
Запустить указав исполняемый файл "gdb progname prog-arguments".
Команды можно сокращать, если не возникает неоднозначностей. 
Если неоднозначность возникает, gdb об этом скажет. 
Ввод пустой строки воспринимается, как повторение предыдущей команды. 
Например команда next означает возобновить выполнить текущую строку программы
и остановиться. 
Если нужно "прошагать" программу, достаточно один раз ввести next, а затем
просто нажимать Enter.
Для справки по команде ввести "help <команда>".
Почти везде работает автодополнение по TAB.


------------------------- НАВИГАЦИЯ ПО ИСХОДНИКАМ -----------------------------

list <номер строки>             -- Распечатать несколько строк из текущего
                                   файла начиная с указанной строки;
list <имя файла>:<номер строки> -- распечатать несколько строк из указанного
                                   файла с указанной строки;
list <имя функции>              -- распечатать несколько строк из функции. 

Если ввести пустую строку после команды list, печать продолжится с того места,
где остановилась в прошлый раз.


-------------------------- ВЫПОЛНЕНИЕ ПРОГРАММЫ -------------------------------

run     -- запустить программу и начать отладку
Ctrl-C  -- брейкнуться в отладчик
kill    -- убить отлаживаемую программу
detach  -- осоединиться от отлаживаемой программы
step    -- выполнение программы по шагам, с заходом в фунции
next    -- то же самое, без захода в функции
finish  -- продолжить выполнение до момента выхода из текущей функции
where   -- получить номер текущей строчки


------------------------- РАБОТА СО СТЕКОМ ВЫЗОВОВ ----------------------------

backtrace       -- распечатать стек вызовов
frame <n>       -- переместиться к стековому фрейму n
info locals     -- посмотреть значения локальных переменных
backtrace full  -- полный стек вызовов с локальными переменными
up, down, frame -- перемещение между фреймами


----------------------- ПРОСМОТР ЗНАЧЕНИЙ ПЕРЕМЕННЫХ --------------------------

print <выражение>   -- распечатать значение выражения
call <выражение>    -- вычислить выражение (допустимы вызовы функций)
display <выражение> -- распечатать сейчас + автоматически печатать каждый раз
                       при остановке программы
undisplay <n>       -- отменить действие команды display, n - это код, который
                       вернула команда display, которую мы хотим отменить


------------------------------- БРЕЙКПОИНТЫ -----------------------------------

break <имя функции>              -- Брякнуться в указанной функции; 
break <имя файля>:<номер строки> -- брякнуться, когда начнет выполняться
                                    указанная строка;
break ... if <условие>           -- брякнуться, усли выполнено условие.
                                    Пример:
                                    Для функции void func(int param) { ;;;; }
                                    нужна команда "break func if param==42"
tbreak                           -- обнократно срабатывающий брейкпоинт
rbreak                           -- брякнуться в функции, указанной регекспом
info breakpoints                 -- список брейкпоинтов
delete <n>                       -- убрать конкретный брейкпоинт по индексу
enable/disable                   -- вкл/выкл срабатывание брейкпоинтов
watch <некий код>                -- Брякнуться, если изменяется выражение
info watchpoints                 -- список вочпоинтов


------------------------------- ИСКЛЮЧЕНИЯ ------------------------------------

catch throw <имя исключения> -- Брякнуться, когда выброшено указанное исключение
catch catch <имя исключения> -- Брякнуться, когда указанное исключение поймано

Без аргуметов эти команды брякаются на всех выбрасиваниях\поимках.


----------------------------------- ЛОГ ---------------------------------------

set logging on/off    -- включить и выключить ведение лога отладки
set logging <file>
set logging overwrite -- перезапись старого лога?


------------------------ ПСЕВДОГРАФИЧЕСКИЙ ИНТЕРФЕЙС --------------------------

--- TODO ---

You can also go into TUI mode while in gdb by using the '-' command.
Returning to the command prompt is Ctrl-X Ctrl-A.
While in TUI mode, up, down, left, and right move through the source.
Use Ctrl-P, Ctrl-N, Ctrl-F, and Ctrl-B to navigate in the command line history.
Основные команды в этом режиме имеют одноклавишные сокращения, которые
не требуют ввода <Enter>. Т.е. если нажать 'n', то сразу выполнится команда
'next' и обновится листинг программы.
Для ввода пoлной команды с аргументами можно начать строку с пробела.


------------------- ПЕРЕНАПРАВЛЕНИЕ ВВОДА-ВЫВОДА ПРОГРАММЫ --------------------

Активнаяя работа программы с вводом-выводом в консоль может помешать отладке,
особенно для ncurses-образных пиложений.

ddb -tty=<device> <имя программы>

Как узнать нужный device?
В той консоли, куда хотите перенаправить ввод-вывод программы, выполните "tty".


--------------------------- ОБРАТНОЕ ВЫПОЛНЕНИЕ -------------------------------

Начиная с 7й версии в gdb включена поддержка обратного выполнения.

reverse-continue (rc)
reverse-finish
reverse-next (rn)
reverse-step (rs)
